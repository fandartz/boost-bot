from aiogram import Bot, Dispatcher, executor, types
import asyncio
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from admin_markup import mainMenu
from user_markup import UsermainMenu

import datetime
import func
import db

always_admin = 11111

TOKEN = 'token'
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class UserState(StatesGroup):
    userid = State()
    info = State()
    sum = State()

class UserState2(StatesGroup):
    userid = State()
    info = State()
    sum = State()

class PrizeState(StatesGroup):
    name = State()
    sum = State()
    count = State()

class EditPrizeState(StatesGroup):
    sum = State()
    count = State()
    id = State()

class Spam(StatesGroup):
    text = State()

class Sms(StatesGroup):
    id = State()
    sms = State()

class UserEdit(StatesGroup):
    id = State()
    name = State()

async def on_startup(_):
    await db.db_start()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')

@dp.message_handler(commands=['start'])
async def bot_message(message: types.Message):

    if (message.from_user.id == always_admin):
        is_admin = 1
        await db.cmd_start_db(message.from_user.id, message.from_user.full_name, message.from_user.username, is_admin)
    else:
        is_admin = 0
        await db.cmd_start_db(message.from_user.id, message.from_user.full_name, message.from_user.username, is_admin)
    
    check = await db.check_admin(message.from_user.id)
    if (check == 1):
        await bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=mainMenu)
    else:
        await bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=UsermainMenu)

#–ê–¥–º–∏–Ω-—á–∞—Å—Ç—å --------------------------------------------------------------------------------------------------------------------
#----------------------------------------–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-------------------------------------------------------------
@dp.message_handler(text=['üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'])
async def all_users(message: types.Message):

    check = await db.check_admin(message.from_user.id)
    if (check == 1):
        await message.answer("üë§–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=await func.get_users(0))


#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –î–∞–ª–µ–µ/–Ω–∞–∑–∞–¥
@dp.callback_query_handler(text_startswith="users_swipe:", state="*")
async def NextOrBack(call: types.CallbackQuery, state: FSMContext):
    
    remover = int(call.data.split(":")[1])
    await call.message.edit_text("üë§–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=await func.get_users(remover))

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
@dp.callback_query_handler(text_startswith="back_to_users", state="*")
async def Back(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("üë§–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=await func.get_users(0))
    
#–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@dp.callback_query_handler(text_startswith="users_open:", state="*")
async def user_info(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    check = await db.check_admin(user_id)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
            InlineKeyboardButton("‚ûï–ù–∞—á–∏—Å–ª–∏—Ç—å –±—É—Å—Ç—ã", callback_data=f"boosts_add:{user_id}"),
            InlineKeyboardButton("‚ûñ–°–ø–∏—Å–∞—Ç—å –±—É—Å—Ç—ã", callback_data=f"boosts_remove:{user_id}"),
        )
    keyboard.add(
            InlineKeyboardButton("üìä–ù–∞—á–∏—Å–ª–µ–Ω–∏—è/–°–ø–∏—Å–∞–Ω–∏—è", callback_data=f"stats:{user_id}"),
        )
    keyboard.add(
            InlineKeyboardButton("üì¨–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"sms:{user_id}:"),
        )
    if (check == 0):
        keyboard.add(
            InlineKeyboardButton("‚úèÔ∏è–°–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"set_name:{user_id}"),
            InlineKeyboardButton("üîß–ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏–æ–º", callback_data=f"set_admin:{user_id}:1"),
        )
    elif (check == 1):
        keyboard.add(
            InlineKeyboardButton("‚úèÔ∏è–°–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data=f"set_name:{user_id}"),
            InlineKeyboardButton("üîß–£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞", callback_data=f"set_admin:{user_id}:0"),
        )
    keyboard.add(
            InlineKeyboardButton("üóë–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"remove_user:{user_id}"),
        )
    keyboard.add(
            InlineKeyboardButton("üëà –ù–∞–∑–∞–¥", callback_data=f"back_to_users"),
        )
    check = await db.users_info(user_id)
    if (check[0][2] == 1):
        admin = '–î–∞'
    else:
        admin = '–ù–µ—Ç'
    await call.message.edit_text(f"üë§–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {check[0][0]} \n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {admin} \n–ë–∞–ª–∞–Ω—Å: {check[0][3]}üçÄ \n–î–µ–π—Å—Ç–≤–∏—è:", reply_markup=keyboard)

#–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
@dp.callback_query_handler(text_startswith="clear_history:", state="*")
async def Back(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
            InlineKeyboardButton("üëà –ù–∞–∑–∞–¥", callback_data=f"users_open:{user_id}"),
        )
    await db.history_clear(user_id, history=None)
    await call.message.edit_text("üóë –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞", reply_markup=keyboard)

#–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(text_startswith="remove_user:", state="*")
async def Back(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
            InlineKeyboardButton("üëà –ù–∞–∑–∞–¥", callback_data=f"back_to_users"),
        )
    await db.remove_user(user_id)
    await call.message.edit_text("üóë–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω", reply_markup=keyboard)

#–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º
@dp.callback_query_handler(text_startswith="set_admin:", state="*")
async def Back(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    admin = int(call.data.split(":")[2])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
            InlineKeyboardButton("üëà –ù–∞–∑–∞–¥", callback_data=f"back_to_users"),
        )
    await db.make_admin(admin, user_id)
    if (admin == 1):
        await call.message.edit_text("üîß–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º", reply_markup=keyboard)
    elif (admin == 0):
        await call.message.edit_text("üîß–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–±—Ä–∞–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤", reply_markup=keyboard)

#–ò—Å—Ç–æ—Ä–∏—è
@dp.callback_query_handler(text_startswith="stats:", state="*")
async def user_info(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    check = await db.users_info(user_id)
    arr = check[0][4]
    if arr != None:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üëà –ù–∞–∑–∞–¥", callback_data=f"users_open:{user_id}"),
            InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data=f"clear_history:{user_id}"),
        )
        parse = arr.strip('[]').split(',')
        history = ""
        for count in range(len(parse)):
            history = history + f"\n {parse[count]}"
        await call.message.edit_text(f"üë§–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {history}", reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üëà –ù–∞–∑–∞–¥", callback_data=f"users_open:{user_id}"),
        )
        await call.message.edit_text(f"üë§–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \n–ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç :(", reply_markup=keyboard)
#----------------------------------------–±—É—Å—Ç—ã-------------------------------------------------------------
#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤ –ø—Ä–∏—á–∏–Ω–∞
@dp.callback_query_handler(text_startswith="boosts_add:", state="*")
async def add_boosts(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    await call.message.edit_text(f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É")
    await state.update_data(userid=user_id)
    await UserState.info.set()

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤ —Å—É–º–º–∞
@dp.message_handler(state=UserState.info)
async def add_info(message: types.Message, state: FSMContext):
    await state.update_data(info=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (—á–∏—Å–ª–æ–º)")
    await UserState.sum.set() # –ª–∏–±–æ –∂–µ UserState.adress.set()

#–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å
@dp.message_handler(state=UserState.sum)
async def get_address(message: types.Message, state: FSMContext):
    await state.update_data(sum=message.text)
    data = await state.get_data()
    check = await db.users_info(data['userid'])
    today = datetime.date.today()

    list_users = await db.users()
    for count in range(len(list_users)):
        if (list_users[count][2] == 0):
            try:
                await bot.send_message(chat_id=list_users[count][1], text=f"üë§–ö–æ–ª–ª–µ–≥–µ: {check[0][0]} \n–ù–∞—á–∏—Å–ª–µ–Ω–æ: {data['sum']} üçÄ\n–ü—Ä–∏—á–∏–Ω–∞: {data['info']}")
            except:
                pass
    summ = check[0][3] + int(data['sum'])
    await db.update_balance(data['userid'], summ)
    
    if check[0][4] == None:
        sum = data['sum']
        info = data['info']
        history = f'{today}|–ù–∞—á–∏—Å–ª–µ–Ω–æ:  {sum} üçÄ|–ü—Ä–∏—á–∏–Ω–∞: {info}'
    elif(check[0][4] == ''):
        sum = data['sum']
        info = data['info']
        history = f'{today}|–ù–∞—á–∏—Å–ª–µ–Ω–æ:  {sum} üçÄ|–ü—Ä–∏—á–∏–Ω–∞: {info}'
    else:
        arr = check[0][4]
        parse = arr.strip('[]').split(',')
        sum = data['sum']
        info = data['info']
        history = ''
        for count in range(len(parse)):
            history = history + f'{parse[count]},'
        history = history + f'{today}|–ù–∞—á–∏—Å–ª–µ–Ω–æ:  {sum} üçÄ|–ü—Ä–∏—á–∏–Ω–∞: {info}'
    await db.history_add(data['userid'], history)
    await state.finish()

    await message.answer("–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω", reply_markup=mainMenu)

#–°–ø–∏—Å–∞–Ω–∏–µ –±—É—Å—Ç–æ–≤
@dp.callback_query_handler(text_startswith="boosts_remove:", state="*")
async def remove_boosts(call: types.CallbackQuery, state: FSMContext):
    user_id = int(call.data.split(":")[1])
    await call.message.edit_text(f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É")
    await state.update_data(userid=user_id)
    await UserState2.info.set()

#–°–ø–∏—Å–∞–Ω–∏–µ –±—É—Å—Ç–æ–≤ —Å—É–º–º–∞
@dp.message_handler(state=UserState2.info)
async def add_info(message: types.Message, state: FSMContext):
    await state.update_data(info=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è (—á–∏—Å–ª–æ–º)")
    await UserState2.sum.set() # –ª–∏–±–æ –∂–µ UserState.adress.set()

#–°–ø–∏—Å–∞–Ω–∏–µ –±—É—Å—Ç–æ–≤ —Å –±–∞–ª–∞–Ω—Å–∞
@dp.message_handler(state=UserState2.sum)
async def get_address(message: types.Message, state: FSMContext):
    await state.update_data(sum=message.text)
    data = await state.get_data()
    check = await db.users_info(data['userid'])
    today = datetime.date.today()

    list_users = await db.users()
    for count in range(len(list_users)):
        if (list_users[count][2] == 0):
            try:
                await bot.send_message(chat_id=list_users[count][1], text=f"üë§–£ –∫–æ–ª–ª–µ–≥–∏: {check[0][0]} \n–°–ø–∏—Å–∞–Ω–æ: {data['sum']} üçÄ\n–ü—Ä–∏—á–∏–Ω–∞: {data['info']}")
            except:
                pass
    summ = check[0][3]-int(data['sum'])
    await db.update_balance(data['userid'], summ)
    
    if check[0][4] == None:
        sum = data['sum']
        info = data['info']
        history = f'{today}|–°–ø–∏—Å–∞–Ω–æ:  {sum} üçÄ|–ü—Ä–∏—á–∏–Ω–∞: {info}'
    elif(check[0][4] == ''):
        sum = data['sum']
        info = data['info']
        history = f'{today}|–°–ø–∏—Å–∞–Ω–æ:  {sum} üçÄ|–ü—Ä–∏—á–∏–Ω–∞: {info}'
    else:
        arr = check[0][4]
        parse = arr.strip('[]').split(',')
        sum = data['sum']
        info = data['info']
        history = ''
        for count in range(len(parse)):
            history = history + f'{parse[count]},'
        history = history + f'{today}|–°–ø–∏—Å–∞–Ω–æ:  {sum} üçÄ|–ü—Ä–∏—á–∏–Ω–∞: {info}'
    await db.history_add(data['userid'], history)
    await db.update_balance(data['userid'], summ)
    await state.finish()

    await message.answer("–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω", reply_markup=mainMenu)



#----------------------------------------–¢–æ–≤–∞—Ä—ã-------------------------------------------------------------

@dp.message_handler(text=['üéÅ–ù–∞–≥—Ä–∞–¥—ã'])
async def all_users(message: types.Message):

    check = await db.check_admin(message.from_user.id)
    if (check == 1):
        await message.answer("üéÅ–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É:", reply_markup=await func.get_all_prizes(message.from_user.id, 0))


#–û —Ç–æ–≤–∞—Ä–µ
@dp.callback_query_handler(text_startswith="prize_open:", state="*")
async def prize_info(call: types.CallbackQuery, state: FSMContext):
    id_prize = int(call.data.split(":")[1])
    id = int(call.data.split(":")[2])
    check = await db.check_admin(id)
    if (check == 1):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úèÔ∏è–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"prize_edit:{id_prize}"),
            InlineKeyboardButton("üóë–£–¥–∞–ª–∏—Ç—å", callback_data=f"prize_remove:{id_prize}:{id}"),
        )
        keyboard.add(
            InlineKeyboardButton("üëà –ù–∞–∑–∞–¥", callback_data=f"back_to_prizes:{id}"),
        )
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üõí–ö—É–ø–∏—Ç—å", callback_data=f"prize_buy:{id_prize}:{id}"),
        )
        keyboard.add(
            InlineKeyboardButton("üëà –ù–∞–∑–∞–¥", callback_data=f"back_to_prizes:{id}"),
        )
    check2 = await db.prizes_info(id_prize)

    await call.message.edit_text(f"üéÅ–í—ã–±—Ä–∞–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞: {check2[0][0]} \n–¶–µ–Ω–∞: {check2[0][1]} üçÄ \n–û—Å—Ç–∞–ª–æ—Å—å: {check2[0][2]} —à—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=keyboard)

#–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(text_startswith="prize_remove:", state="*")
async def remove_prize(call: types.CallbackQuery, state: FSMContext):
    id = int(call.data.split(":")[1])
    id2 = int(call.data.split(":")[2])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
            InlineKeyboardButton("üëà –ö –Ω–∞–≥—Ä–∞–¥–∞–º", callback_data=f"back_to_prizes:{id2}"),
        )
    await db.remove_prizes(id)
    await call.message.edit_text(f"–ù–∞–≥—Ä–∞–¥–∞ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=keyboard)

#–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ
@dp.callback_query_handler(text_startswith="prize_add", state="*")
async def add_prizename(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(f"–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã")
    await PrizeState.name.set()

#–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É —Å—É–º–º–∞
@dp.message_handler(state=PrizeState.name)
async def add_prizesum(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –Ω–∞–≥—Ä–∞–¥—ã (—á–∏—Å–ª–æ–º)")
    await PrizeState.sum.set() # –ª–∏–±–æ –∂–µ UserState.adress.set()

#–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É —Å—É–º–º–∞
@dp.message_handler(state=PrizeState.sum)
async def add_prizecount(message: types.Message, state: FSMContext):
    await state.update_data(sum=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥(—á–∏—Å–ª–æ–º)")
    await PrizeState.count.set() # –ª–∏–±–æ –∂–µ UserState.adress.set()

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –±–∞–∑—É
@dp.message_handler(state=PrizeState.count)
async def add_prizesum(message: types.Message, state: FSMContext):
    await state.update_data(count=message.text)
    data = await state.get_data()
    await db.add_prize(data['name'], int(data['sum']), int(data['count']))
    await state.finish()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
            InlineKeyboardButton("üëà –ö –Ω–∞–≥—Ä–∞–¥–∞–º", callback_data=f"back_to_prizes:{message.from_user.id}"),
        )
    await message.answer("–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=keyboard)

#–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã
@dp.callback_query_handler(text_startswith="prize_edit:", state="*")
async def prize_sum(call: types.CallbackQuery, state: FSMContext):
    id = int(call.data.split(":")[1])
    await state.update_data(id=id)
    await call.message.edit_text("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –Ω–∞–≥—Ä–∞–¥—ã")
    await EditPrizeState.sum.set()

#–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É —Å—É–º–º–∞
@dp.message_handler(state=EditPrizeState.sum)
async def add_prizecount(message: types.Message, state: FSMContext):
    await state.update_data(sum=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥(—á–∏—Å–ª–æ–º)")
    await EditPrizeState.count.set() # –ª–∏–±–æ –∂–µ UserState.adress.set()

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –≤ –±–∞–∑—É
@dp.message_handler(state=EditPrizeState.count)
async def prize_sum_edit(message: types.Message, state: FSMContext):
    await state.update_data(count=message.text)
    data = await state.get_data()
    await db.update_prize(int(data['id']), int(data['sum']))
    await db.update_prize_count(int(data['id']), int(data['count']))
    await state.finish()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
            InlineKeyboardButton("üëà –ö –Ω–∞–≥—Ä–∞–¥–∞–º", callback_data=f"back_to_prizes:{message.from_user.id}"),
        )
    await message.answer("–ù–∞–≥—Ä–∞–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=keyboard)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–æ–≤–∞—Ä–∞–º
@dp.callback_query_handler(text_startswith="back_to_prizes:", state="*")
async def Back(call: types.CallbackQuery, state: FSMContext):
    id = int(call.data.split(":")[1])
    await call.message.edit_text("üéÅ–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É:", reply_markup=await func.get_all_prizes(id, 0))

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –î–∞–ª–µ–µ/–Ω–∞–∑–∞–¥ –≤ —Ç–æ–≤–∞—Ä–∞—Ö
@dp.callback_query_handler(text_startswith="prize_swipe:", state="*")
async def NextOrBackPrize(call: types.CallbackQuery, state: FSMContext):
    remover = int(call.data.split(":")[1])
    id = int(call.data.split(":")[2])
    await call.message.edit_text("üéÅ–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É:", reply_markup=await func.get_all_prizes(id, remover))

#------------------------------------------------—Ä–∞—Å—Å—ã–ª–∫–∞------------------------------------------------

@dp.message_handler(text=['üì¨–†–∞—Å—Å—ã–ª–∫–∞'])
async def spam_users(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üëà –û—Ç–º–µ–Ω–∞", callback_data=f"spam_cancel:{message.from_user.id}"),
    )
    check = await db.check_admin(message.from_user.id)
    if (check == 1):
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=keyboard)
        await Spam.text.set()

#–í–æ–∑–≤—Ä–∞—Ç –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
@dp.callback_query_handler(text_startswith="spam_cancel:", state="*")
async def NextOrBackPrize(call: types.CallbackQuery, state: FSMContext):
    id = int(call.data.split(":")[1])
    await state.reset_state()
    await call.message.delete()
    await call.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=mainMenu)

#–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –õ–°
@dp.callback_query_handler(text_startswith="sms_back:", state="*")
async def NextOrBackPrize(call: types.CallbackQuery, state: FSMContext):
    id = int(call.data.split(":")[1])
    await state.reset_state()
    await call.message.delete()
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üëà –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"users_open:{id}"),
    )
    await call.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=keyboard)

#–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º —é–∑–µ—Ä–∞–º
@dp.message_handler(content_types=['any'], state=Spam.text)
async def spam_all_users(message: types.Message, state: FSMContext):
    list_users = await db.users()
    for count in range(len(list_users)):
        if (list_users[count][2] == 0):
            try:
                await bot.copy_message(chat_id=list_users[count][1], from_chat_id=message.chat.id, message_id=message.message_id)
            except:
                pass
    await state.finish()
    await message.answer("üì¨–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=mainMenu)

#–õ–° –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —é–∑–µ—Ä—É
@dp.callback_query_handler(text_startswith="sms:", state="*")
async def profile(call: types.CallbackQuery, state: FSMContext):
    id = int(call.data.split(":")[1])
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"sms_back:{id}"),
    )
    await state.update_data(id=id)
    await call.message.edit_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=keyboard)
    await Sms.sms.set()

#–û—Ç–ø—Ä–∞–≤–∫–∞ –ª—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —é–∑–µ—Ä—É
@dp.message_handler(content_types=['any'], state=Sms.sms)
async def spam_all_users(message: types.Message, state: FSMContext):
    data = await state.get_data()
    chat_id = data['id']
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üëà –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data=f"users_open:{chat_id}"),
    )
    try:
        await bot.copy_message(chat_id=chat_id, from_chat_id=message.chat.id, message_id=message.message_id)
    except:
        pass
    await state.finish()
    await message.answer("üì¨–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=keyboard)
#–ê–¥–º–∏–Ω–∫–∞----------------------------------------------------------------------------------------------------

#–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-----------------------------------------------------------------------------------------------
#–ü—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(text=['üë§–ü—Ä–æ—Ñ–∏–ª—å'])
async def user_profile(message: types.Message):
    check = await db.users_info(message.from_user.id)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úèÔ∏è–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–º—è", callback_data=f"set_name:{message.from_user.id}"),
    )
    keyboard.add(
        InlineKeyboardButton("üìä–ù–∞—á–∏—Å–ª–µ–Ω–∏—è.–°–ø–∏—Å–∞–Ω–∏—è", callback_data=f"user_stat:{message.from_user.id}"),
    )
    await message.answer(f"üë§–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n–í–∞—à–µ –∏–º—è: {check[0][0]} \n–í–∞—à –±–∞–ª–∞–Ω—Å: {check[0][3]}üçÄ \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


#–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.callback_query_handler(text_startswith="set_name:", state="*")
async def profile(call: types.CallbackQuery, state: FSMContext):
    id = int(call.data.split(":")[1])
    await state.update_data(id=id)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–º—è:")
    await UserEdit.name.set()

#–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–º–µ–Ω–∏
@dp.message_handler(state=UserEdit.name)
async def change_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    data = await state.get_data()
    id=data['id']
    await db.update_user(id, data['name'])
    await state.finish()
    check = await db.check_admin(message.from_user.id)
    if (check == 1):
        await message.answer("–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=mainMenu)
    else:
        await message.answer("–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!", reply_markup=UsermainMenu)


#–ò—Å—Ç–æ—Ä–∏—è
@dp.callback_query_handler(text_startswith="user_stat:", state="*")
async def user_info(call: types.CallbackQuery, state: FSMContext,):
    user_id = int(call.data.split(":")[1])
    check_hist = await db.get_history(user_id)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üëà –í—ã—Ö–æ–¥", callback_data="user_back"),
    )

    check = await db.users_info(user_id)
    arr = check[0][4]
    if arr != None:
        parse = arr.strip('[]').split(',')
        history = ""
        for count in range(len(parse)):
            history = history + f"\n {parse[count]}"
        await call.message.edit_text(f"üë§–ò—Å—Ç–æ—Ä–∏—è: {history}", reply_markup=keyboard)
    else:
        await call.message.edit_text(f"üë§–ò—Å—Ç–æ—Ä–∏—è: \n–ò—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç :(", reply_markup=keyboard)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –í–æ–∑–≤—Ä–∞—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query_handler(text_startswith="user_back", state="*")
async def Back(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=UsermainMenu)

#–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(text=['üéÅ–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥'])
async def all_users(message: types.Message):
    await message.answer("üéÅ–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É:", reply_markup=await func.get_all_prizes(message.from_user.id, 0))


#–ü–æ–∫—É–ø–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã
@dp.callback_query_handler(text_startswith="prize_buy:", state="*")
async def Back(call: types.CallbackQuery, state: FSMContext):
    id_prize = int(call.data.split(":")[1])
    id = int(call.data.split(":")[2])
    today = datetime.date.today()

    prizes = await db.prizes_info(id_prize)
    if (prizes[0][2] > 0):
        user = await db.users_info(id)
        if (user[0][3]>=prizes[0][1]):
            new_count = prizes[0][2] - 1
            new_balance = user[0][3] - prizes[0][1]
            await db.update_balance(id, new_balance)
            await db.update_prize_count(id_prize, new_count)
            await call.message.edit_text("üéÅ–ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞!")
            list_users = await db.users()
            for count in range(len(list_users)):
                try:
                    await bot.send_message(chat_id=list_users[count][1], text=f"üë§–ö–æ–ª–ª–µ–≥–∞: {user[0][0]} \nüéÅ–ü—Ä–∏–æ–±—Ä—ë–ª: {prizes[0][0]}")
                except:
                    pass
            if user[0][4] == None:
                history = f'{today}|–ü–æ–∫—É–ø–∫–∞: {prizes[0][0]}|–°—É–º–º–∞: {prizes[0][1]}üçÄ'
            elif(user[0][4] == ''):
                history = f'{today}|–ü–æ–∫—É–ø–∫–∞: {prizes[0][0]}|–°—É–º–º–∞: {prizes[0][1]}üçÄ'
            else:
                arr = user[0][4]
                parse = arr.strip('[]').split(',')
                history = ''
                for count in range(len(parse)):
                    history = history + f'{parse[count]},'
                history = history + f'{today}|–ü–æ–∫—É–ø–∫–∞: {prizes[0][0]}|–°—É–º–º–∞: {prizes[0][1]}üçÄ'
            await db.history_add(id, history)
        else:
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton("üëà –ö –Ω–∞–≥—Ä–∞–¥–∞–º", callback_data=f"back_to_prizes:{id}"),
            )
            await call.message.edit_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ :(", reply_markup=keyboard)
    elif (prizes[0][2] == 1):
        user = await db.users_info(id)
        if (user[0][3]>=prizes[0][1]):
            new_count = prizes[0][2] - 1
            new_balance = user[0][3] - prizes[0][1]
            await db.update_balance(id, new_balance)
            await db.remove_prizes(id_prize)
            await call.message.edit_text("üéÅ–ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞!")
            list_users = await db.admin_ids()
            for count in range(len(list_users)):
                try:
                    await bot.send_message(chat_id=list_users[count][0], text=f"üë§–ö–æ–ª–ª–µ–≥–∞: {user[0][0]} \nüéÅ–ü—Ä–∏–æ–±—Ä—ë–ª: {prizes[0][0]}")
                except:
                    pass
            if user[0][4] == None:
                history = f'{today}|–ü–æ–∫—É–ø–∫–∞: {prizes[0][0]}|–°—É–º–º–∞: {prizes[0][1]}üçÄ'
            elif(user[0][4] == ''):
                history = f'{today}|–ü–æ–∫—É–ø–∫–∞: {prizes[0][0]}|–°—É–º–º–∞: {prizes[0][1]}üçÄ'
            else:
                arr = user[0][4]
                parse = arr.strip('[]').split(',')
                history = ''
                for count in range(len(parse)):
                    history = history + f'{parse[count]},'
                history = history + f'{today}|–ü–æ–∫—É–ø–∫–∞: {prizes[0][0]}|–°—É–º–º–∞: {prizes[0][1]}üçÄ'
            await db.history_add(id, history)
    elif (prizes[0][2] == 0):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üëà –ö –Ω–∞–≥—Ä–∞–¥–∞–º", callback_data=f"back_to_prizes:{id}"),
        )
        await call.message.edit_text("üéÅ–î–∞–Ω–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å :(", reply_markup=keyboard)

#–°–ø–∏—Å–æ–∫ –±–∞–ª–∞–Ω—Å–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.message_handler(text=['üçÄ–ë–∞–ª–∞–Ω—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤'])
async def all_users(message: types.Message):
    check2 = await db.users()
    balance = ''
    for count in range(len(check2)):
        balance = balance + f"\n–°–æ—Ç—Ä—É–¥–Ω–∏–∫: {check2[count][0]}. –ë–∞–ª–∞–Ω—Å: {check2[count][3]}üçÄ"
    check = await db.check_admin(message.from_user.id)
    
    if (check == 1):
        await message.answer(f"–ë–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {balance}", reply_markup=mainMenu)
    else:
        await message.answer(f"–ë–∞–ª–∞–Ω—Å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {balance}", reply_markup=UsermainMenu)
if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup, skip_updates=True)